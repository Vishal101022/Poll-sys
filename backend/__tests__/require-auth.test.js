// Generated by CodiumAI

const requireAuth = require("../src/middleware/require-auth");
const jwt = require('jsonwebtoken');
const env = require('../config/env');

describe('requireAuth_function', () => {

    // Tests that a valid token in the Authorization header is verified successfully and the decoded payload is attached to the request object
    it('verifies a valid token and attaches the decoded payload to the request object', () => {
        const req = {
            headers: {
                authorization: `Bearer ${jwt.sign({ id: 1 }, env.JWT_SECRET)}`
            }
        };
        const res = {};
        const next = jest.fn();

        requireAuth(req, res, next);

        expect(next).toHaveBeenCalled();
        expect(req.user.id).toEqual(1);
    });

    // Tests that an error is returned when no Authorization header is provided
    it('returns an error when no Authorization header is provided', () => {
        const req = {
            headers: {}
        };
        const res = {
            status: jest.fn(() => res),
            json: jest.fn()
        };
        const next = jest.fn();

        requireAuth(req, res, next);

        expect(res.status).toHaveBeenCalledWith(401);
        expect(res.json).toHaveBeenCalledWith({ message: 'No token provided' });
    });

    // Tests that an error is returned when an invalid Authorization header is provided
    it('returns an error when an invalid Authorization header is provided', () => {
        const req = {
            headers: {
                authorization: 'invalid'
            }
        };
        const res = {
            status: jest.fn(() => res),
            json: jest.fn()
        };
        const next = jest.fn();

        requireAuth(req, res, next);

        expect(res.status).toHaveBeenCalledWith(401);
        expect(res.json).toHaveBeenCalledWith({ message: 'Invalid authorization header' });
    });

    // Tests that an error is returned when an invalid token is provided
    it('returns an error when an invalid token is provided', () => {
        const req = {
            headers: {
                authorization: 'Bearer invalid'
            }
        };
        const res = {
            status: jest.fn(() => res),
            json: jest.fn()
        };
        const next = jest.fn();

        requireAuth(req, res, next);

        expect(res.status).toHaveBeenCalledWith(401);
        expect(res.json).toHaveBeenCalledWith({ message: 'Invalid token' });
    });

    // Tests that the function logs the decoded token on successful verification
    it('logs the decoded token on successful verification', () => {
        const req = {
            headers: {
                authorization: `Bearer ${jwt.sign({ id: 1 }, env.JWT_SECRET)}`
            }
        };
        const res = {};
        const next = jest.fn();
        const consoleSpy = jest.spyOn(console, 'log');

        requireAuth(req, res, next);

        console.log(consoleSpy);

        expect(consoleSpy).toHaveBeenCalledWith({ id: 1, iat: expect.any(Number) });

        consoleSpy.mockRestore();
    });

    // Tests that the function logs the error on failed verification
    it('logs the error on failed verification', () => {
        const req = {
            headers: {
                authorization: 'Bearer invalid'
            }
        };
        const res = {
            status: jest.fn(() => res),
            json: jest.fn()
        };
        const next = jest.fn();
        const consoleSpy = jest.spyOn(console, 'log');

        requireAuth(req, res, next);

        expect(consoleSpy).toHaveBeenCalled();

        consoleSpy.mockRestore();
    });
});
